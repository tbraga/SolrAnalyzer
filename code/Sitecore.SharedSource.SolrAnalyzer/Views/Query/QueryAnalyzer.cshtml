@model Sitecore.SharedSource.SolrAnalyzer.Models.Boards.IStatisticsBoard

@{
    Layout = "~/Views/Query/SolrAnalyzerLayout.cshtml";
}

<h1 class="modal-heading">Solr Analyzer : Query Analyzer</h1>
<div class="frame">
    <div class="rte-search-form">
        <form method="post" action="/SolrAnalyzer/Query/QueryAnalysis">
            <div class="search-results">
                <div id="content">
                    <div id="metrics-query-analysis" ng-class="showAllStacktraces ? 'expanded' : 'collapsed'" class="ng-scope collapsed">
                        <div class="page-content">
                            <div class="page-title">Description:</div>
                            <div class="page-summary">
                                This page will analyze the performance of the queries that have been running against Solr. Each query is an HTTP call and has a consequence in
                                downloading the requested data. Try to tune your queries to be lean, this will help in downloading a smaller amount of data while applying the
                                same intended value. You will also save on bandwidth between the server and the requestor.
                            </div>
                            <div class="page-title">Keep in mind:</div>
                            <div class="page-summary">
                                <ul>
                                    <li>
                                        Select only the fields on the document you need for your scenario. If you only need 10 of the 50 fields for a specific query only call those 10,
                                        this will reduce the amount of bytes during the response download.
                                    </li>
                                    <li>
                                        Make sure you are only requesting the number of documents you need by using the ROWS parameter within your request. If you need to paginate you
                                        can use the ROWS parameter in combination with the START parameter.
                                    </li>
                                    <li>
                                        Caching: Optimize the document cache on each of your heavily utilized cores. Specifically look at the eviction rate and the hit ratio.
                                    </li>
                                    <li>
                                        By running the query through the Chrome browser, you can look at the network tab of Chrome's Developer Tools and see the byte size returned from Solr
                                        as well as the response time. Getting these two numbers to perform are key to a well optimized environment.
                                    </li>
                                </ul>
                            </div>
                            <div class="page-title">Filter by Index:</div>
                            <select id="idxDropdown">
                                <option></option>
                                @{
                                    foreach (var idx in Model.Indexes)
                                    {
                                        if (!string.IsNullOrEmpty(Model.SelectedIndex) && idx == Model.SelectedIndex)
                                        {
                                            <option value="@idx" selected="selected">@idx</option>
                                        }
                                        else
                                        {
                                            <option value="@idx">@idx</option>
                                        }
                                    }
                                }
                            </select>
                            <div class="page-summary"></div>
                        </div>
                    </div>

                    <table id="query-analysis" class="ng-scope">
                        <thead>
                        <tr>
                            <th><b>Index</b></th>
                            <th><b>Query</b></th>
                            <th><b>Rows</b></th>
                            <th><b>Documents Found</b></th>
                            <th><b>Documents Returned</b></th>
                            <th><b>Time (ms)</b></th>
                            <th><b>Bytes</b></th>
                        </tr>
                        </thead>
                        <tbody>
                        @{
                            foreach (var query in Model.Queries)
                            {
                                <tr>
                                    <td>@query.Index</td>
                                    <td>@query.GetAnchor()</td>
                                    <td>@query.RowsRequested</td>
                                    <td>@query.DocumentsFound</td>
                                    <td>@string.Format("{0:n0}", query.DocumentsReturned)</td>
                                    <td>@string.Format("{0:n0}", query.Timespan.TotalMilliseconds)</td>
                                    <td>@string.Format("{0:n0}", query.Bytes)</td>
                                </tr>
                            }
                        }
                        <tr class="query-analysis-totals">
                            <td>&nbsp;</td>
                            <td>&nbsp;</td>
                            <td>&nbsp;</td>
                            <td>&nbsp;</td>
                            <td id="totDocsReturned" style="color: red; font-weight: bold;">@string.Format("{0:n0}", Model.TotalNumDocsReturned)</td>
                            <td id="totTime" style="color: red; font-weight: bold;">@string.Format("{0:n0}", Model.TotalTime)</td>
                            <td id="totBytes" style="color: red; font-weight: bold;">@string.Format("{0:n0}", Model.TotalPayload)</td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </form>
    </div>

    <script>
        jQuery(function() {
            jQuery('#idxDropdown').on('change',
                function (e) {
                    var selectedIdx = jQuery('#idxDropdown').val();
                    window.location.href = window.location.pathname + '?idx=' + selectedIdx;
                });
        });
    </script>
</div>